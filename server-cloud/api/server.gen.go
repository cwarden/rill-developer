// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// Organization defines model for Organization.
type Organization struct {
	CreatedOn   openapi_types.Date `json:"created_on"`
	Description *string            `json:"description,omitempty"`
	Id          string             `json:"id"`
	Name        string             `json:"name"`
	UpdatedOn   openapi_types.Date `json:"updated_on"`
}

// Permission defines model for Permission.
type Permission struct {
	CreatedOn openapi_types.Date `json:"created_on"`
	Id        string             `json:"id"`
	Name      string             `json:"name"`
	UpdatedOn openapi_types.Date `json:"updated_on"`
}

// Project defines model for Project.
type Project struct {
	CreatedOn   openapi_types.Date `json:"created_on"`
	Description *string            `json:"description,omitempty"`
	Id          string             `json:"id"`
	Name        string             `json:"name"`
	UpdatedOn   openapi_types.Date `json:"updated_on"`
}

// Role defines model for Role.
type Role struct {
	CreatedOn openapi_types.Date `json:"created_on"`
	Id        string             `json:"id"`
	Name      string             `json:"name"`
	UpdatedOn openapi_types.Date `json:"updated_on"`
}

// User defines model for User.
type User struct {
	CreatedOn   openapi_types.Date `json:"created_on"`
	Description *string            `json:"description,omitempty"`
	Id          string             `json:"id"`
	Name        string             `json:"name"`
	UpdatedOn   openapi_types.Date `json:"updated_on"`
	UserName    string             `json:"user_name"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse = Error

// CreateOrganizationJSONBody defines parameters for CreateOrganization.
type CreateOrganizationJSONBody struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
}

// UpdateOrganizationJSONBody defines parameters for UpdateOrganization.
type UpdateOrganizationJSONBody struct {
	Description *string `json:"description,omitempty"`
}

// UpdateProjectJSONBody defines parameters for UpdateProject.
type UpdateProjectJSONBody struct {
	Description *string `json:"description,omitempty"`
}

// CreateProjectJSONBody defines parameters for CreateProject.
type CreateProjectJSONBody struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
}

// AddUserJSONBody defines parameters for AddUser.
type AddUserJSONBody struct {
	Name string `json:"name"`
}

// RemoveUserJSONBody defines parameters for RemoveUser.
type RemoveUserJSONBody struct {
	Name string `json:"name"`
}

// CreatePermissionJSONBody defines parameters for CreatePermission.
type CreatePermissionJSONBody struct {
	Name string `json:"name"`
}

// CreateRoleJSONBody defines parameters for CreateRole.
type CreateRoleJSONBody struct {
	Name string `json:"name"`
}

// AddPermissionJSONBody defines parameters for AddPermission.
type AddPermissionJSONBody struct {
	Name string `json:"name"`
}

// RemovePermissionJSONBody defines parameters for RemovePermission.
type RemovePermissionJSONBody struct {
	Name string `json:"name"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	UserName    string  `json:"user_name"`
}

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody struct {
	Description *string `json:"description,omitempty"`
}

// AssignRoleJSONBody defines parameters for AssignRole.
type AssignRoleJSONBody struct {
	Name string `json:"name"`
}

// RemoveRoleJSONBody defines parameters for RemoveRole.
type RemoveRoleJSONBody struct {
	Name string `json:"name"`
}

// CreateOrganizationJSONRequestBody defines body for CreateOrganization for application/json ContentType.
type CreateOrganizationJSONRequestBody CreateOrganizationJSONBody

// UpdateOrganizationJSONRequestBody defines body for UpdateOrganization for application/json ContentType.
type UpdateOrganizationJSONRequestBody UpdateOrganizationJSONBody

// UpdateProjectJSONRequestBody defines body for UpdateProject for application/json ContentType.
type UpdateProjectJSONRequestBody UpdateProjectJSONBody

// CreateProjectJSONRequestBody defines body for CreateProject for application/json ContentType.
type CreateProjectJSONRequestBody CreateProjectJSONBody

// AddUserJSONRequestBody defines body for AddUser for application/json ContentType.
type AddUserJSONRequestBody AddUserJSONBody

// RemoveUserJSONRequestBody defines body for RemoveUser for application/json ContentType.
type RemoveUserJSONRequestBody RemoveUserJSONBody

// CreatePermissionJSONRequestBody defines body for CreatePermission for application/json ContentType.
type CreatePermissionJSONRequestBody CreatePermissionJSONBody

// CreateRoleJSONRequestBody defines body for CreateRole for application/json ContentType.
type CreateRoleJSONRequestBody CreateRoleJSONBody

// AddPermissionJSONRequestBody defines body for AddPermission for application/json ContentType.
type AddPermissionJSONRequestBody AddPermissionJSONBody

// RemovePermissionJSONRequestBody defines body for RemovePermission for application/json ContentType.
type RemovePermissionJSONRequestBody RemovePermissionJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody UpdateUserJSONBody

// AssignRoleJSONRequestBody defines body for AssignRole for application/json ContentType.
type AssignRoleJSONRequestBody AssignRoleJSONBody

// RemoveRoleJSONRequestBody defines body for RemoveRole for application/json ContentType.
type RemoveRoleJSONRequestBody RemoveRoleJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v1/organizations)
	FindOrganizations(ctx echo.Context) error

	// (POST /v1/organizations)
	CreateOrganization(ctx echo.Context) error

	// (DELETE /v1/organizations/{name})
	DeleteOrganization(ctx echo.Context, name string) error

	// (GET /v1/organizations/{name})
	FindOrganization(ctx echo.Context, name string) error

	// (PUT /v1/organizations/{name})
	UpdateOrganization(ctx echo.Context, name string) error

	// (DELETE /v1/organizations/{organization}/project/{name})
	DeleteProject(ctx echo.Context, organization string, name string) error

	// (GET /v1/organizations/{organization}/project/{name})
	FindProject(ctx echo.Context, organization string, name string) error

	// (PUT /v1/organizations/{organization}/project/{name})
	UpdateProject(ctx echo.Context, organization string, name string) error

	// (GET /v1/organizations/{organization}/projects)
	FindProjects(ctx echo.Context, organization string) error

	// (POST /v1/organizations/{organization}/projects)
	CreateProject(ctx echo.Context, organization string) error

	// (GET /v1/organizations/{organization}/users)
	ListUsers(ctx echo.Context, organization string) error

	// (POST /v1/organizations/{organization}/users)
	AddUser(ctx echo.Context, organization string) error

	// (PUT /v1/organizations/{organization}/users)
	RemoveUser(ctx echo.Context, organization string) error

	// (GET /v1/permissions)
	FindPermissions(ctx echo.Context) error

	// (POST /v1/permissions)
	CreatePermission(ctx echo.Context) error

	// (DELETE /v1/permissions/{name})
	DeletePermission(ctx echo.Context, name string) error

	// (GET /v1/permissions/{name})
	FindPermission(ctx echo.Context, name string) error

	// (GET /v1/roles)
	FindRoles(ctx echo.Context) error

	// (POST /v1/roles)
	CreateRole(ctx echo.Context) error

	// (DELETE /v1/roles/{name})
	DeleteRole(ctx echo.Context, name string) error

	// (GET /v1/roles/{name})
	FindRole(ctx echo.Context, name string) error

	// (GET /v1/roles/{role}/permissions)
	ListPermissions(ctx echo.Context, role string) error

	// (POST /v1/roles/{role}/permissions)
	AddPermission(ctx echo.Context, role string) error

	// (PUT /v1/roles/{role}/permissions)
	RemovePermission(ctx echo.Context, role string) error

	// (GET /v1/users)
	FindUsers(ctx echo.Context) error

	// (POST /v1/users)
	CreateUser(ctx echo.Context) error

	// (DELETE /v1/users/{name})
	DeleteUser(ctx echo.Context, name string) error

	// (GET /v1/users/{name})
	FindUser(ctx echo.Context, name string) error

	// (PUT /v1/users/{name})
	UpdateUser(ctx echo.Context, name string) error

	// (GET /v1/users/{name}/roles)
	ListRoles(ctx echo.Context, name string) error

	// (POST /v1/users/{name}/roles)
	AssignRole(ctx echo.Context, name string) error

	// (PUT /v1/users/{name}/roles)
	RemoveRole(ctx echo.Context, name string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindOrganizations converts echo context to params.
func (w *ServerInterfaceWrapper) FindOrganizations(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindOrganizations(ctx)
	return err
}

// CreateOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) CreateOrganization(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateOrganization(ctx)
	return err
}

// DeleteOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteOrganization(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteOrganization(ctx, name)
	return err
}

// FindOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) FindOrganization(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindOrganization(ctx, name)
	return err
}

// UpdateOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateOrganization(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateOrganization(ctx, name)
	return err
}

// DeleteProject converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organization" -------------
	var organization string

	err = runtime.BindStyledParameterWithLocation("simple", false, "organization", runtime.ParamLocationPath, ctx.Param("organization"), &organization)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organization: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteProject(ctx, organization, name)
	return err
}

// FindProject converts echo context to params.
func (w *ServerInterfaceWrapper) FindProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organization" -------------
	var organization string

	err = runtime.BindStyledParameterWithLocation("simple", false, "organization", runtime.ParamLocationPath, ctx.Param("organization"), &organization)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organization: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindProject(ctx, organization, name)
	return err
}

// UpdateProject converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organization" -------------
	var organization string

	err = runtime.BindStyledParameterWithLocation("simple", false, "organization", runtime.ParamLocationPath, ctx.Param("organization"), &organization)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organization: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateProject(ctx, organization, name)
	return err
}

// FindProjects converts echo context to params.
func (w *ServerInterfaceWrapper) FindProjects(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organization" -------------
	var organization string

	err = runtime.BindStyledParameterWithLocation("simple", false, "organization", runtime.ParamLocationPath, ctx.Param("organization"), &organization)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organization: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindProjects(ctx, organization)
	return err
}

// CreateProject converts echo context to params.
func (w *ServerInterfaceWrapper) CreateProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organization" -------------
	var organization string

	err = runtime.BindStyledParameterWithLocation("simple", false, "organization", runtime.ParamLocationPath, ctx.Param("organization"), &organization)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organization: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateProject(ctx, organization)
	return err
}

// ListUsers converts echo context to params.
func (w *ServerInterfaceWrapper) ListUsers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organization" -------------
	var organization string

	err = runtime.BindStyledParameterWithLocation("simple", false, "organization", runtime.ParamLocationPath, ctx.Param("organization"), &organization)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organization: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListUsers(ctx, organization)
	return err
}

// AddUser converts echo context to params.
func (w *ServerInterfaceWrapper) AddUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organization" -------------
	var organization string

	err = runtime.BindStyledParameterWithLocation("simple", false, "organization", runtime.ParamLocationPath, ctx.Param("organization"), &organization)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organization: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddUser(ctx, organization)
	return err
}

// RemoveUser converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organization" -------------
	var organization string

	err = runtime.BindStyledParameterWithLocation("simple", false, "organization", runtime.ParamLocationPath, ctx.Param("organization"), &organization)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organization: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RemoveUser(ctx, organization)
	return err
}

// FindPermissions converts echo context to params.
func (w *ServerInterfaceWrapper) FindPermissions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPermissions(ctx)
	return err
}

// CreatePermission converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePermission(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePermission(ctx)
	return err
}

// DeletePermission converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePermission(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePermission(ctx, name)
	return err
}

// FindPermission converts echo context to params.
func (w *ServerInterfaceWrapper) FindPermission(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPermission(ctx, name)
	return err
}

// FindRoles converts echo context to params.
func (w *ServerInterfaceWrapper) FindRoles(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindRoles(ctx)
	return err
}

// CreateRole converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRole(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRole(ctx)
	return err
}

// DeleteRole converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteRole(ctx, name)
	return err
}

// FindRole converts echo context to params.
func (w *ServerInterfaceWrapper) FindRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindRole(ctx, name)
	return err
}

// ListPermissions converts echo context to params.
func (w *ServerInterfaceWrapper) ListPermissions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "role" -------------
	var role string

	err = runtime.BindStyledParameterWithLocation("simple", false, "role", runtime.ParamLocationPath, ctx.Param("role"), &role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPermissions(ctx, role)
	return err
}

// AddPermission converts echo context to params.
func (w *ServerInterfaceWrapper) AddPermission(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "role" -------------
	var role string

	err = runtime.BindStyledParameterWithLocation("simple", false, "role", runtime.ParamLocationPath, ctx.Param("role"), &role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddPermission(ctx, role)
	return err
}

// RemovePermission converts echo context to params.
func (w *ServerInterfaceWrapper) RemovePermission(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "role" -------------
	var role string

	err = runtime.BindStyledParameterWithLocation("simple", false, "role", runtime.ParamLocationPath, ctx.Param("role"), &role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RemovePermission(ctx, role)
	return err
}

// FindUsers converts echo context to params.
func (w *ServerInterfaceWrapper) FindUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindUsers(ctx)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUser(ctx, name)
	return err
}

// FindUser converts echo context to params.
func (w *ServerInterfaceWrapper) FindUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindUser(ctx, name)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateUser(ctx, name)
	return err
}

// ListRoles converts echo context to params.
func (w *ServerInterfaceWrapper) ListRoles(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRoles(ctx, name)
	return err
}

// AssignRole converts echo context to params.
func (w *ServerInterfaceWrapper) AssignRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AssignRole(ctx, name)
	return err
}

// RemoveRole converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RemoveRole(ctx, name)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/organizations", wrapper.FindOrganizations)
	router.POST(baseURL+"/v1/organizations", wrapper.CreateOrganization)
	router.DELETE(baseURL+"/v1/organizations/:name", wrapper.DeleteOrganization)
	router.GET(baseURL+"/v1/organizations/:name", wrapper.FindOrganization)
	router.PUT(baseURL+"/v1/organizations/:name", wrapper.UpdateOrganization)
	router.DELETE(baseURL+"/v1/organizations/:organization/project/:name", wrapper.DeleteProject)
	router.GET(baseURL+"/v1/organizations/:organization/project/:name", wrapper.FindProject)
	router.PUT(baseURL+"/v1/organizations/:organization/project/:name", wrapper.UpdateProject)
	router.GET(baseURL+"/v1/organizations/:organization/projects", wrapper.FindProjects)
	router.POST(baseURL+"/v1/organizations/:organization/projects", wrapper.CreateProject)
	router.GET(baseURL+"/v1/organizations/:organization/users", wrapper.ListUsers)
	router.POST(baseURL+"/v1/organizations/:organization/users", wrapper.AddUser)
	router.PUT(baseURL+"/v1/organizations/:organization/users", wrapper.RemoveUser)
	router.GET(baseURL+"/v1/permissions", wrapper.FindPermissions)
	router.POST(baseURL+"/v1/permissions", wrapper.CreatePermission)
	router.DELETE(baseURL+"/v1/permissions/:name", wrapper.DeletePermission)
	router.GET(baseURL+"/v1/permissions/:name", wrapper.FindPermission)
	router.GET(baseURL+"/v1/roles", wrapper.FindRoles)
	router.POST(baseURL+"/v1/roles", wrapper.CreateRole)
	router.DELETE(baseURL+"/v1/roles/:name", wrapper.DeleteRole)
	router.GET(baseURL+"/v1/roles/:name", wrapper.FindRole)
	router.GET(baseURL+"/v1/roles/:role/permissions", wrapper.ListPermissions)
	router.POST(baseURL+"/v1/roles/:role/permissions", wrapper.AddPermission)
	router.PUT(baseURL+"/v1/roles/:role/permissions", wrapper.RemovePermission)
	router.GET(baseURL+"/v1/users", wrapper.FindUsers)
	router.POST(baseURL+"/v1/users", wrapper.CreateUser)
	router.DELETE(baseURL+"/v1/users/:name", wrapper.DeleteUser)
	router.GET(baseURL+"/v1/users/:name", wrapper.FindUser)
	router.PUT(baseURL+"/v1/users/:name", wrapper.UpdateUser)
	router.GET(baseURL+"/v1/users/:name/roles", wrapper.ListRoles)
	router.POST(baseURL+"/v1/users/:name/roles", wrapper.AssignRole)
	router.PUT(baseURL+"/v1/users/:name/roles", wrapper.RemoveRole)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaX2+rNhT/KtPZHlFJ2zfeum6VNk1qla3aQxVVLpwkrsD2bFMpi/juV7YhhIY0pA0U",
	"ktyXC7Zz7PP7nX8+dAkhTwRnyLSCYAkSleBMoX35XUoux/mIGQg508i0eSRCxDQkmnLmvyrOzJgK55gQ",
	"8/SLxCkE8LNfSvfdrPKtVMjMPy//SbmbeRCSC5SaukOEPLJ7T7lMiIYAKNPXV+CBXgh0rzhDCZkHCSpF",
	"ZnZ1Pqm0pGwGZieJ/6VUYgTBk5NZrp+shPGXVwy1kXUvZ4TR/62CNYeSSDRGz25udbSIaCxPVmzuQYQq",
	"lFQUsjbmaVQ7zEiCtROpiJpv/053GkEu2VtXoyK0DpAHlAlV6hBwDEJdye3jmXoPxjzGkyD9UaEcNuMe",
	"pArl8xZhdTCV6z8BmYngGKaS6sXfJpI7wF6QSJQ3qZ6Xb3fFuf/89x/I476R5GZLReZaC7CpgbIptzpQ",
	"bcwPxjSOf7qNeWpO/YbShSK4vBhdjIziXCAjgkIA13bIA0H03B7If7v0+VpAt4MztN5tmLaDf0QQwB1l",
	"0X1lpVfNiVej0V6ZkGpM1K6UWEk22QoLIiVZgEuUEU5JGuttklZn9KtJ2/5WcFWj6q1lubK1Mw9U+lce",
	"LfZSs+oxu1ygmXnaVTU2V1mmZYrZFzlqTs0Xqci8TVP0l0bPzMEWo8ZNpn6z4++YEkSSBDVKBcHTEqjx",
	"BWPwhRsHhTdXsfLW9H4P/6QWxy8aXyM361KfHtqFByKtQenRht6OcGrf77Pjd+X118wXroZs7OFFzdmE",
	"ZL4Zt5uR7Q0xVgwfmcOYcIFDqwFncGAff+g6FO97RK2Pa+SHYlGrRjLpovheYdtp3d2Jk03OBf23upK5",
	"W2/3o7+o0o92xfCdyHZOuvKgmyiy+w3DdwbkG47FdmqLMSb8Dc+89Za3PKCJVZ9/RwWwtq6TNF1+f+g4",
	"U5cbn6BprcN+cANrfjNe52Dwna/v0aav9iB5jB+HmrFd0UWQsV+6ug0vdssTDCwO6gOaUONgkiM++DDS",
	"tR695d38lzUqXMyVq1q47EZPlg7ap65F9+XQTbRv5vocdOcKq5Wr15m7IVRDH7eMTNgvWkZH1tRx1VDe",
	"H/jWruVef0OT59byF8fUC7DG2Liuatzb6Xld1bUe/e/due+CLeNy/F/x2nLNHVdoU/QWV+hTvCxsrWeV",
	"ojPW8i3qfKs/cBl75qt/t/Es+xEAAP//BcwHEkgyAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
