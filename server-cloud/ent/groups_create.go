// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rilldata/rill/server-cloud/ent/groups"
	"github.com/rilldata/rill/server-cloud/ent/organization"
	"github.com/rilldata/rill/server-cloud/ent/project"
	"github.com/rilldata/rill/server-cloud/ent/user"
)

// GroupsCreate is the builder for creating a Groups entity.
type GroupsCreate struct {
	config
	mutation *GroupsMutation
	hooks    []Hook
}

// SetName sets the "Name" field.
func (gc *GroupsCreate) SetName(s string) *GroupsCreate {
	gc.mutation.SetName(s)
	return gc
}

// SetDescription sets the "Description" field.
func (gc *GroupsCreate) SetDescription(s string) *GroupsCreate {
	gc.mutation.SetDescription(s)
	return gc
}

// SetNillableDescription sets the "Description" field if the given value is not nil.
func (gc *GroupsCreate) SetNillableDescription(s *string) *GroupsCreate {
	if s != nil {
		gc.SetDescription(*s)
	}
	return gc
}

// SetCreatedOn sets the "created_on" field.
func (gc *GroupsCreate) SetCreatedOn(t time.Time) *GroupsCreate {
	gc.mutation.SetCreatedOn(t)
	return gc
}

// SetNillableCreatedOn sets the "created_on" field if the given value is not nil.
func (gc *GroupsCreate) SetNillableCreatedOn(t *time.Time) *GroupsCreate {
	if t != nil {
		gc.SetCreatedOn(*t)
	}
	return gc
}

// SetUpdatedOn sets the "updated_on" field.
func (gc *GroupsCreate) SetUpdatedOn(t time.Time) *GroupsCreate {
	gc.mutation.SetUpdatedOn(t)
	return gc
}

// SetNillableUpdatedOn sets the "updated_on" field if the given value is not nil.
func (gc *GroupsCreate) SetNillableUpdatedOn(t *time.Time) *GroupsCreate {
	if t != nil {
		gc.SetUpdatedOn(*t)
	}
	return gc
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (gc *GroupsCreate) AddUserIDs(ids ...int) *GroupsCreate {
	gc.mutation.AddUserIDs(ids...)
	return gc
}

// AddUsers adds the "users" edges to the User entity.
func (gc *GroupsCreate) AddUsers(u ...*User) *GroupsCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gc.AddUserIDs(ids...)
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (gc *GroupsCreate) AddProjectIDs(ids ...int) *GroupsCreate {
	gc.mutation.AddProjectIDs(ids...)
	return gc
}

// AddProjects adds the "projects" edges to the Project entity.
func (gc *GroupsCreate) AddProjects(p ...*Project) *GroupsCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gc.AddProjectIDs(ids...)
}

// AddOrganizationIDs adds the "organization" edge to the Organization entity by IDs.
func (gc *GroupsCreate) AddOrganizationIDs(ids ...int) *GroupsCreate {
	gc.mutation.AddOrganizationIDs(ids...)
	return gc
}

// AddOrganization adds the "organization" edges to the Organization entity.
func (gc *GroupsCreate) AddOrganization(o ...*Organization) *GroupsCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return gc.AddOrganizationIDs(ids...)
}

// Mutation returns the GroupsMutation object of the builder.
func (gc *GroupsCreate) Mutation() *GroupsMutation {
	return gc.mutation
}

// Save creates the Groups in the database.
func (gc *GroupsCreate) Save(ctx context.Context) (*Groups, error) {
	var (
		err  error
		node *Groups
	)
	gc.defaults()
	if len(gc.hooks) == 0 {
		if err = gc.check(); err != nil {
			return nil, err
		}
		node, err = gc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroupsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gc.check(); err != nil {
				return nil, err
			}
			gc.mutation = mutation
			if node, err = gc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(gc.hooks) - 1; i >= 0; i-- {
			if gc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, gc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Groups)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GroupsMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GroupsCreate) SaveX(ctx context.Context) *Groups {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GroupsCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GroupsCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gc *GroupsCreate) defaults() {
	if _, ok := gc.mutation.Description(); !ok {
		v := groups.DefaultDescription
		gc.mutation.SetDescription(v)
	}
	if _, ok := gc.mutation.CreatedOn(); !ok {
		v := groups.DefaultCreatedOn()
		gc.mutation.SetCreatedOn(v)
	}
	if _, ok := gc.mutation.UpdatedOn(); !ok {
		v := groups.DefaultUpdatedOn()
		gc.mutation.SetUpdatedOn(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gc *GroupsCreate) check() error {
	if _, ok := gc.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New(`ent: missing required field "Groups.Name"`)}
	}
	if v, ok := gc.mutation.Name(); ok {
		if err := groups.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "Groups.Name": %w`, err)}
		}
	}
	if _, ok := gc.mutation.Description(); !ok {
		return &ValidationError{Name: "Description", err: errors.New(`ent: missing required field "Groups.Description"`)}
	}
	if _, ok := gc.mutation.CreatedOn(); !ok {
		return &ValidationError{Name: "created_on", err: errors.New(`ent: missing required field "Groups.created_on"`)}
	}
	if _, ok := gc.mutation.UpdatedOn(); !ok {
		return &ValidationError{Name: "updated_on", err: errors.New(`ent: missing required field "Groups.updated_on"`)}
	}
	return nil
}

func (gc *GroupsCreate) sqlSave(ctx context.Context) (*Groups, error) {
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (gc *GroupsCreate) createSpec() (*Groups, *sqlgraph.CreateSpec) {
	var (
		_node = &Groups{config: gc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: groups.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: groups.FieldID,
			},
		}
	)
	if value, ok := gc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groups.FieldName,
		})
		_node.Name = value
	}
	if value, ok := gc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groups.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := gc.mutation.CreatedOn(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: groups.FieldCreatedOn,
		})
		_node.CreatedOn = value
	}
	if value, ok := gc.mutation.UpdatedOn(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: groups.FieldUpdatedOn,
		})
		_node.UpdatedOn = value
	}
	if nodes := gc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   groups.UsersTable,
			Columns: groups.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   groups.ProjectsTable,
			Columns: groups.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   groups.OrganizationTable,
			Columns: groups.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GroupsCreateBulk is the builder for creating many Groups entities in bulk.
type GroupsCreateBulk struct {
	config
	builders []*GroupsCreate
}

// Save creates the Groups entities in the database.
func (gcb *GroupsCreateBulk) Save(ctx context.Context) ([]*Groups, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Groups, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GroupsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GroupsCreateBulk) SaveX(ctx context.Context) []*Groups {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GroupsCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GroupsCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}
