// Code generated by ent, DO NOT EDIT.

package groups

import (
	"time"
)

const (
	// Label holds the string label denoting the groups type in the database.
	Label = "groups"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreatedOn holds the string denoting the created_on field in the database.
	FieldCreatedOn = "created_on"
	// FieldUpdatedOn holds the string denoting the updated_on field in the database.
	FieldUpdatedOn = "updated_on"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeProjects holds the string denoting the projects edge name in mutations.
	EdgeProjects = "projects"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// Table holds the table name of the groups in the database.
	Table = "groups"
	// UsersTable is the table that holds the users relation/edge. The primary key declared below.
	UsersTable = "groups_users"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// ProjectsTable is the table that holds the projects relation/edge. The primary key declared below.
	ProjectsTable = "groups_projects"
	// ProjectsInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectsInverseTable = "projects"
	// OrganizationTable is the table that holds the organization relation/edge. The primary key declared below.
	OrganizationTable = "organization_groups"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
)

// Columns holds all SQL columns for groups fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldCreatedOn,
	FieldUpdatedOn,
}

var (
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"groups_id", "user_id"}
	// ProjectsPrimaryKey and ProjectsColumn2 are the table columns denoting the
	// primary key for the projects relation (M2M).
	ProjectsPrimaryKey = []string{"groups_id", "project_id"}
	// OrganizationPrimaryKey and OrganizationColumn2 are the table columns denoting the
	// primary key for the organization relation (M2M).
	OrganizationPrimaryKey = []string{"organization_id", "groups_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "Name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultDescription holds the default value on creation for the "Description" field.
	DefaultDescription string
	// DefaultCreatedOn holds the default value on creation for the "created_on" field.
	DefaultCreatedOn func() time.Time
	// DefaultUpdatedOn holds the default value on creation for the "updated_on" field.
	DefaultUpdatedOn func() time.Time
)
