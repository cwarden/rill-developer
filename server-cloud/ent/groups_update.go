// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rilldata/rill/server-cloud/ent/groups"
	"github.com/rilldata/rill/server-cloud/ent/organization"
	"github.com/rilldata/rill/server-cloud/ent/predicate"
	"github.com/rilldata/rill/server-cloud/ent/project"
	"github.com/rilldata/rill/server-cloud/ent/user"
)

// GroupsUpdate is the builder for updating Groups entities.
type GroupsUpdate struct {
	config
	hooks    []Hook
	mutation *GroupsMutation
}

// Where appends a list predicates to the GroupsUpdate builder.
func (gu *GroupsUpdate) Where(ps ...predicate.Groups) *GroupsUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetName sets the "Name" field.
func (gu *GroupsUpdate) SetName(s string) *GroupsUpdate {
	gu.mutation.SetName(s)
	return gu
}

// SetDescription sets the "Description" field.
func (gu *GroupsUpdate) SetDescription(s string) *GroupsUpdate {
	gu.mutation.SetDescription(s)
	return gu
}

// SetNillableDescription sets the "Description" field if the given value is not nil.
func (gu *GroupsUpdate) SetNillableDescription(s *string) *GroupsUpdate {
	if s != nil {
		gu.SetDescription(*s)
	}
	return gu
}

// SetCreatedOn sets the "created_on" field.
func (gu *GroupsUpdate) SetCreatedOn(t time.Time) *GroupsUpdate {
	gu.mutation.SetCreatedOn(t)
	return gu
}

// SetNillableCreatedOn sets the "created_on" field if the given value is not nil.
func (gu *GroupsUpdate) SetNillableCreatedOn(t *time.Time) *GroupsUpdate {
	if t != nil {
		gu.SetCreatedOn(*t)
	}
	return gu
}

// SetUpdatedOn sets the "updated_on" field.
func (gu *GroupsUpdate) SetUpdatedOn(t time.Time) *GroupsUpdate {
	gu.mutation.SetUpdatedOn(t)
	return gu
}

// SetNillableUpdatedOn sets the "updated_on" field if the given value is not nil.
func (gu *GroupsUpdate) SetNillableUpdatedOn(t *time.Time) *GroupsUpdate {
	if t != nil {
		gu.SetUpdatedOn(*t)
	}
	return gu
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (gu *GroupsUpdate) AddUserIDs(ids ...int) *GroupsUpdate {
	gu.mutation.AddUserIDs(ids...)
	return gu
}

// AddUsers adds the "users" edges to the User entity.
func (gu *GroupsUpdate) AddUsers(u ...*User) *GroupsUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gu.AddUserIDs(ids...)
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (gu *GroupsUpdate) AddProjectIDs(ids ...int) *GroupsUpdate {
	gu.mutation.AddProjectIDs(ids...)
	return gu
}

// AddProjects adds the "projects" edges to the Project entity.
func (gu *GroupsUpdate) AddProjects(p ...*Project) *GroupsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gu.AddProjectIDs(ids...)
}

// AddOrganizationIDs adds the "organization" edge to the Organization entity by IDs.
func (gu *GroupsUpdate) AddOrganizationIDs(ids ...int) *GroupsUpdate {
	gu.mutation.AddOrganizationIDs(ids...)
	return gu
}

// AddOrganization adds the "organization" edges to the Organization entity.
func (gu *GroupsUpdate) AddOrganization(o ...*Organization) *GroupsUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return gu.AddOrganizationIDs(ids...)
}

// Mutation returns the GroupsMutation object of the builder.
func (gu *GroupsUpdate) Mutation() *GroupsMutation {
	return gu.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (gu *GroupsUpdate) ClearUsers() *GroupsUpdate {
	gu.mutation.ClearUsers()
	return gu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (gu *GroupsUpdate) RemoveUserIDs(ids ...int) *GroupsUpdate {
	gu.mutation.RemoveUserIDs(ids...)
	return gu
}

// RemoveUsers removes "users" edges to User entities.
func (gu *GroupsUpdate) RemoveUsers(u ...*User) *GroupsUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gu.RemoveUserIDs(ids...)
}

// ClearProjects clears all "projects" edges to the Project entity.
func (gu *GroupsUpdate) ClearProjects() *GroupsUpdate {
	gu.mutation.ClearProjects()
	return gu
}

// RemoveProjectIDs removes the "projects" edge to Project entities by IDs.
func (gu *GroupsUpdate) RemoveProjectIDs(ids ...int) *GroupsUpdate {
	gu.mutation.RemoveProjectIDs(ids...)
	return gu
}

// RemoveProjects removes "projects" edges to Project entities.
func (gu *GroupsUpdate) RemoveProjects(p ...*Project) *GroupsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gu.RemoveProjectIDs(ids...)
}

// ClearOrganization clears all "organization" edges to the Organization entity.
func (gu *GroupsUpdate) ClearOrganization() *GroupsUpdate {
	gu.mutation.ClearOrganization()
	return gu
}

// RemoveOrganizationIDs removes the "organization" edge to Organization entities by IDs.
func (gu *GroupsUpdate) RemoveOrganizationIDs(ids ...int) *GroupsUpdate {
	gu.mutation.RemoveOrganizationIDs(ids...)
	return gu
}

// RemoveOrganization removes "organization" edges to Organization entities.
func (gu *GroupsUpdate) RemoveOrganization(o ...*Organization) *GroupsUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return gu.RemoveOrganizationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GroupsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(gu.hooks) == 0 {
		if err = gu.check(); err != nil {
			return 0, err
		}
		affected, err = gu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroupsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gu.check(); err != nil {
				return 0, err
			}
			gu.mutation = mutation
			affected, err = gu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gu.hooks) - 1; i >= 0; i-- {
			if gu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GroupsUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GroupsUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GroupsUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gu *GroupsUpdate) check() error {
	if v, ok := gu.mutation.Name(); ok {
		if err := groups.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "Groups.Name": %w`, err)}
		}
	}
	return nil
}

func (gu *GroupsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   groups.Table,
			Columns: groups.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: groups.FieldID,
			},
		},
	}
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groups.FieldName,
		})
	}
	if value, ok := gu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groups.FieldDescription,
		})
	}
	if value, ok := gu.mutation.CreatedOn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: groups.FieldCreatedOn,
		})
	}
	if value, ok := gu.mutation.UpdatedOn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: groups.FieldUpdatedOn,
		})
	}
	if gu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   groups.UsersTable,
			Columns: groups.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !gu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   groups.UsersTable,
			Columns: groups.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   groups.UsersTable,
			Columns: groups.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   groups.ProjectsTable,
			Columns: groups.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !gu.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   groups.ProjectsTable,
			Columns: groups.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   groups.ProjectsTable,
			Columns: groups.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   groups.OrganizationTable,
			Columns: groups.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedOrganizationIDs(); len(nodes) > 0 && !gu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   groups.OrganizationTable,
			Columns: groups.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   groups.OrganizationTable,
			Columns: groups.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groups.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// GroupsUpdateOne is the builder for updating a single Groups entity.
type GroupsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupsMutation
}

// SetName sets the "Name" field.
func (guo *GroupsUpdateOne) SetName(s string) *GroupsUpdateOne {
	guo.mutation.SetName(s)
	return guo
}

// SetDescription sets the "Description" field.
func (guo *GroupsUpdateOne) SetDescription(s string) *GroupsUpdateOne {
	guo.mutation.SetDescription(s)
	return guo
}

// SetNillableDescription sets the "Description" field if the given value is not nil.
func (guo *GroupsUpdateOne) SetNillableDescription(s *string) *GroupsUpdateOne {
	if s != nil {
		guo.SetDescription(*s)
	}
	return guo
}

// SetCreatedOn sets the "created_on" field.
func (guo *GroupsUpdateOne) SetCreatedOn(t time.Time) *GroupsUpdateOne {
	guo.mutation.SetCreatedOn(t)
	return guo
}

// SetNillableCreatedOn sets the "created_on" field if the given value is not nil.
func (guo *GroupsUpdateOne) SetNillableCreatedOn(t *time.Time) *GroupsUpdateOne {
	if t != nil {
		guo.SetCreatedOn(*t)
	}
	return guo
}

// SetUpdatedOn sets the "updated_on" field.
func (guo *GroupsUpdateOne) SetUpdatedOn(t time.Time) *GroupsUpdateOne {
	guo.mutation.SetUpdatedOn(t)
	return guo
}

// SetNillableUpdatedOn sets the "updated_on" field if the given value is not nil.
func (guo *GroupsUpdateOne) SetNillableUpdatedOn(t *time.Time) *GroupsUpdateOne {
	if t != nil {
		guo.SetUpdatedOn(*t)
	}
	return guo
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (guo *GroupsUpdateOne) AddUserIDs(ids ...int) *GroupsUpdateOne {
	guo.mutation.AddUserIDs(ids...)
	return guo
}

// AddUsers adds the "users" edges to the User entity.
func (guo *GroupsUpdateOne) AddUsers(u ...*User) *GroupsUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guo.AddUserIDs(ids...)
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (guo *GroupsUpdateOne) AddProjectIDs(ids ...int) *GroupsUpdateOne {
	guo.mutation.AddProjectIDs(ids...)
	return guo
}

// AddProjects adds the "projects" edges to the Project entity.
func (guo *GroupsUpdateOne) AddProjects(p ...*Project) *GroupsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return guo.AddProjectIDs(ids...)
}

// AddOrganizationIDs adds the "organization" edge to the Organization entity by IDs.
func (guo *GroupsUpdateOne) AddOrganizationIDs(ids ...int) *GroupsUpdateOne {
	guo.mutation.AddOrganizationIDs(ids...)
	return guo
}

// AddOrganization adds the "organization" edges to the Organization entity.
func (guo *GroupsUpdateOne) AddOrganization(o ...*Organization) *GroupsUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return guo.AddOrganizationIDs(ids...)
}

// Mutation returns the GroupsMutation object of the builder.
func (guo *GroupsUpdateOne) Mutation() *GroupsMutation {
	return guo.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (guo *GroupsUpdateOne) ClearUsers() *GroupsUpdateOne {
	guo.mutation.ClearUsers()
	return guo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (guo *GroupsUpdateOne) RemoveUserIDs(ids ...int) *GroupsUpdateOne {
	guo.mutation.RemoveUserIDs(ids...)
	return guo
}

// RemoveUsers removes "users" edges to User entities.
func (guo *GroupsUpdateOne) RemoveUsers(u ...*User) *GroupsUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guo.RemoveUserIDs(ids...)
}

// ClearProjects clears all "projects" edges to the Project entity.
func (guo *GroupsUpdateOne) ClearProjects() *GroupsUpdateOne {
	guo.mutation.ClearProjects()
	return guo
}

// RemoveProjectIDs removes the "projects" edge to Project entities by IDs.
func (guo *GroupsUpdateOne) RemoveProjectIDs(ids ...int) *GroupsUpdateOne {
	guo.mutation.RemoveProjectIDs(ids...)
	return guo
}

// RemoveProjects removes "projects" edges to Project entities.
func (guo *GroupsUpdateOne) RemoveProjects(p ...*Project) *GroupsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return guo.RemoveProjectIDs(ids...)
}

// ClearOrganization clears all "organization" edges to the Organization entity.
func (guo *GroupsUpdateOne) ClearOrganization() *GroupsUpdateOne {
	guo.mutation.ClearOrganization()
	return guo
}

// RemoveOrganizationIDs removes the "organization" edge to Organization entities by IDs.
func (guo *GroupsUpdateOne) RemoveOrganizationIDs(ids ...int) *GroupsUpdateOne {
	guo.mutation.RemoveOrganizationIDs(ids...)
	return guo
}

// RemoveOrganization removes "organization" edges to Organization entities.
func (guo *GroupsUpdateOne) RemoveOrganization(o ...*Organization) *GroupsUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return guo.RemoveOrganizationIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GroupsUpdateOne) Select(field string, fields ...string) *GroupsUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Groups entity.
func (guo *GroupsUpdateOne) Save(ctx context.Context) (*Groups, error) {
	var (
		err  error
		node *Groups
	)
	if len(guo.hooks) == 0 {
		if err = guo.check(); err != nil {
			return nil, err
		}
		node, err = guo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroupsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = guo.check(); err != nil {
				return nil, err
			}
			guo.mutation = mutation
			node, err = guo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(guo.hooks) - 1; i >= 0; i-- {
			if guo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = guo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, guo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Groups)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GroupsMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GroupsUpdateOne) SaveX(ctx context.Context) *Groups {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GroupsUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GroupsUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guo *GroupsUpdateOne) check() error {
	if v, ok := guo.mutation.Name(); ok {
		if err := groups.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "Groups.Name": %w`, err)}
		}
	}
	return nil
}

func (guo *GroupsUpdateOne) sqlSave(ctx context.Context) (_node *Groups, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   groups.Table,
			Columns: groups.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: groups.FieldID,
			},
		},
	}
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Groups.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, groups.FieldID)
		for _, f := range fields {
			if !groups.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != groups.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groups.FieldName,
		})
	}
	if value, ok := guo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groups.FieldDescription,
		})
	}
	if value, ok := guo.mutation.CreatedOn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: groups.FieldCreatedOn,
		})
	}
	if value, ok := guo.mutation.UpdatedOn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: groups.FieldUpdatedOn,
		})
	}
	if guo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   groups.UsersTable,
			Columns: groups.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !guo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   groups.UsersTable,
			Columns: groups.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   groups.UsersTable,
			Columns: groups.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   groups.ProjectsTable,
			Columns: groups.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !guo.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   groups.ProjectsTable,
			Columns: groups.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   groups.ProjectsTable,
			Columns: groups.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   groups.OrganizationTable,
			Columns: groups.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedOrganizationIDs(); len(nodes) > 0 && !guo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   groups.OrganizationTable,
			Columns: groups.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   groups.OrganizationTable,
			Columns: groups.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: organization.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Groups{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groups.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
