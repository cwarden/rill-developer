// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/rilldata/rill/server-cloud/ent/groups"
)

// Groups is the model entity for the Groups schema.
type Groups struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Description holds the value of the "Description" field.
	Description string `json:"Description,omitempty"`
	// CreatedOn holds the value of the "created_on" field.
	CreatedOn time.Time `json:"created_on,omitempty"`
	// UpdatedOn holds the value of the "updated_on" field.
	UpdatedOn time.Time `json:"updated_on,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GroupsQuery when eager-loading is set.
	Edges GroupsEdges `json:"edges"`
}

// GroupsEdges holds the relations/edges for other nodes in the graph.
type GroupsEdges struct {
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// Projects holds the value of the projects edge.
	Projects []*Project `json:"projects,omitempty"`
	// Organization holds the value of the organization edge.
	Organization []*Organization `json:"organization,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e GroupsEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// ProjectsOrErr returns the Projects value or an error if the edge
// was not loaded in eager-loading.
func (e GroupsEdges) ProjectsOrErr() ([]*Project, error) {
	if e.loadedTypes[1] {
		return e.Projects, nil
	}
	return nil, &NotLoadedError{edge: "projects"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading.
func (e GroupsEdges) OrganizationOrErr() ([]*Organization, error) {
	if e.loadedTypes[2] {
		return e.Organization, nil
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Groups) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case groups.FieldID:
			values[i] = new(sql.NullInt64)
		case groups.FieldName, groups.FieldDescription:
			values[i] = new(sql.NullString)
		case groups.FieldCreatedOn, groups.FieldUpdatedOn:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Groups", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Groups fields.
func (gr *Groups) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case groups.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gr.ID = int(value.Int64)
		case groups.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				gr.Name = value.String
			}
		case groups.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Description", values[i])
			} else if value.Valid {
				gr.Description = value.String
			}
		case groups.FieldCreatedOn:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_on", values[i])
			} else if value.Valid {
				gr.CreatedOn = value.Time
			}
		case groups.FieldUpdatedOn:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_on", values[i])
			} else if value.Valid {
				gr.UpdatedOn = value.Time
			}
		}
	}
	return nil
}

// QueryUsers queries the "users" edge of the Groups entity.
func (gr *Groups) QueryUsers() *UserQuery {
	return (&GroupsClient{config: gr.config}).QueryUsers(gr)
}

// QueryProjects queries the "projects" edge of the Groups entity.
func (gr *Groups) QueryProjects() *ProjectQuery {
	return (&GroupsClient{config: gr.config}).QueryProjects(gr)
}

// QueryOrganization queries the "organization" edge of the Groups entity.
func (gr *Groups) QueryOrganization() *OrganizationQuery {
	return (&GroupsClient{config: gr.config}).QueryOrganization(gr)
}

// Update returns a builder for updating this Groups.
// Note that you need to call Groups.Unwrap() before calling this method if this Groups
// was returned from a transaction, and the transaction was committed or rolled back.
func (gr *Groups) Update() *GroupsUpdateOne {
	return (&GroupsClient{config: gr.config}).UpdateOne(gr)
}

// Unwrap unwraps the Groups entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gr *Groups) Unwrap() *Groups {
	_tx, ok := gr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Groups is not a transactional entity")
	}
	gr.config.driver = _tx.drv
	return gr
}

// String implements the fmt.Stringer.
func (gr *Groups) String() string {
	var builder strings.Builder
	builder.WriteString("Groups(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gr.ID))
	builder.WriteString("Name=")
	builder.WriteString(gr.Name)
	builder.WriteString(", ")
	builder.WriteString("Description=")
	builder.WriteString(gr.Description)
	builder.WriteString(", ")
	builder.WriteString("created_on=")
	builder.WriteString(gr.CreatedOn.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_on=")
	builder.WriteString(gr.UpdatedOn.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// GroupsSlice is a parsable slice of Groups.
type GroupsSlice []*Groups

func (gr GroupsSlice) config(cfg config) {
	for _i := range gr {
		gr[_i].config = cfg
	}
}
